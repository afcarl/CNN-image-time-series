!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2_plankton.planktonDataPylearn2.PlanktonData {
        which_set: 'trainRotated',
        start: 0,
        stop: 300000
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 200,
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [28, 28],
            num_channels: 1
        },
        layers: [ !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'c0',
                     output_channels: 128,
                     irange: .05,
                     kernel_shape: [5, 5],
                     pool_shape: [2, 2],
                     pool_stride: [2, 2],
                     max_kernel_norm: 1.9365
                 }, !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'c1',
                     output_channels: 256,
                     irange: .05,
                     kernel_shape: [5, 5],
                     pool_shape: [2, 2],
                     pool_stride: [2, 2],
                     max_kernel_norm: 1.9365
                 }
                 , !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'c2',
                     output_channels: 512,
                     irange: .05,
                     kernel_shape: [3, 3],
                     pool_shape: [2, 2],
                     pool_stride: [2, 2],
                     max_kernel_norm: 1.9365
                 }
                 , !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'f0',
                     dim: 500,
                     irange: .05,
                     max_col_norm: 1.9365,
                 }
                 , !obj:pylearn2.models.mlp.Softmax {
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 121,
                     istdev: .05
                 }
                 # add fully connected layer before Softmax? 
                 # Example: Sigmoid, RectifiedLinear, Maxout, tanh, Linear
                ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 200,
        learning_rate: .01,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .5
        },
        monitoring_dataset:
            {
                'valid' : !obj:pylearn2_plankton.planktonDataPylearn2.PlanktonData {
                              which_set: 'trainRotated',
                              start: 300000,
                              stop:  360000
                          }
            },
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [
            !obj:pylearn2.costs.cost.MethodCost {
                method: 'cost_from_X'
            }, !obj:pylearn2.costs.mlp.WeightDecay {
                coeffs: [ .00005, .00005, .00005 , 0.005, 0.005] 
                #the length must agree with number of layers
            }
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_y_misclass",
                    prop_decrease: 0.,
                    N: 100
                },
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: 300
                },
            ]
        },
    },
    extensions:
        [ !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "model_files/plankton_conv_visualize_rotated_model.pkl"
        }, 
        !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 10,
            final_momentum: .99
        }
    ]
}


